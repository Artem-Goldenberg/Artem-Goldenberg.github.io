{"seeAlsoSections":[{"generated":true,"title":"Public Mappers","identifiers":["doc:\/\/JustText\/documentation\/JustText\/JTForEach","doc:\/\/JustText\/documentation\/JustText\/JTMapPlain","doc:\/\/JustText\/documentation\/JustText\/JTMapComma","doc:\/\/JustText\/documentation\/JustText\/JTMapParenSep","doc:\/\/JustText\/documentation\/JustText\/JTMapMakeSep"],"anchor":"Public-Mappers"}],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/JustText\/documentation\/JustText\/JTMap"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"#define"},{"kind":"text","text":" "},{"kind":"identifier","text":"JTMap"},{"text":"(","kind":"text"},{"text":"mapper","kind":"internalParam"},{"kind":"text","text":", "},{"kind":"internalParam","text":"sep"},{"kind":"text","text":", ...)"}],"languages":["occ"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A separator which will be used to separate the resulting sequence"}]}],"name":"sep"}]},{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Much more important than "},{"type":"reference","isActive":true,"identifier":"doc:\/\/JustText\/documentation\/JustText\/JTForEach"},{"type":"text","text":" is the "},{"code":"Map","type":"codeVoice"},{"text":". It is more generalised version of foreach, which supports","type":"text"},{"type":"text","text":" "},{"text":"arbitrary separators between token outputs, instead of just empty space as in the case of ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Of course we could generate separators in our own ","type":"text"},{"code":"mapper","type":"codeVoice"},{"text":" macro which is invoked on every argument. But than,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this corner case with the last argument, where we don’t need to insert a separator, we would have to always think about"},{"text":" ","type":"text"},{"type":"text","text":"this. Instead, "},{"code":"Map","type":"codeVoice"},{"type":"text","text":" will take care of it for you and only insert separator between elements and not after the last one."}]},{"text":"About separator","anchor":"About-separator","type":"heading","level":3},{"inlineContent":[{"text":"The thing about ","type":"text"},{"type":"codeVoice","code":"sep"},{"type":"text","text":" is that it is a real pain. Because it is very common to want to separate"},{"type":"text","text":" "},{"text":"results by a comma, but if we just pass ","type":"text"},{"code":",","type":"codeVoice"},{"type":"text","text":" when invoking "},{"code":"Map","type":"codeVoice"},{"type":"text","text":", obviously it would be wrong, because"},{"type":"text","text":" "},{"text":"preprocessor considers","type":"text"},{"code":",","type":"codeVoice"},{"type":"text","text":" as argument separator and not as argument itself. So why don’t we just create a"},{"type":"text","text":" "},{"type":"text","text":"special version of Argmap which would separate it’s outputs by a comma? Well, sometimes you need more complicated"},{"text":" ","type":"text"},{"type":"text","text":"separators, with a comma inside of them somewhere. Maybe if user provides a macro which expands to comma, maybe"},{"text":" ","type":"text"},{"type":"text","text":"this would help? Well, if this macro needs to be applied to a set of parenthesys, then yes, it would work just fine. But to"},{"type":"text","text":" "},{"text":"create a separate macro for each separator, even if it is a simple one seems like unnececcary work, besides adding more","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"macros to the code may decrease readability of code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The old library solution was to detect whether ","type":"text"},{"code":"sep","type":"codeVoice"},{"type":"text","text":" is enclosed in parenthesys, and if it is, then use what’s inside the parens"},{"type":"text","text":" "},{"type":"text","text":"as a sep. If "},{"type":"codeVoice","code":"sep"},{"type":"text","text":" is not in parentheses, then just use it as is."},{"text":" ","type":"text"},{"type":"text","text":"This solution was very easy to use for the user, but the macro definition itself turned out to be very unreadable because of it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So in this library, there are three different maps (at least for now): this one which accepts a simple plan seperator without"},{"text":" ","type":"text"},{"text":"commas, another one which, like in the old library, extracts separator from the parens around it, and last one which would","type":"text"},{"text":" ","type":"text"},{"text":"accept a separator producer and invoke it when the separator is needed, it may even take as arguments the two elements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which needs to be separated by this in the future."}]}]}],"kind":"symbol","sections":[],"abstract":[{"text":"Applies first argument to all the rest, and custom glue the results","type":"text"}],"hierarchy":{"paths":[["doc:\/\/JustText\/documentation\/JustText"]]},"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/justtext\/jtmap"]}],"metadata":{"fragments":[{"kind":"identifier","text":"JTMap"}],"title":"JTMap","symbolKind":"macro","navigatorTitle":[{"kind":"identifier","text":"JTMap"}],"role":"symbol","roleHeading":"Macro","modules":[{"name":"JustText"}],"externalID":"c:JustText.h@626@macro@JTMap"},"references":{"doc://JustText/documentation/JustText/JTMapPlain":{"kind":"symbol","type":"topic","abstract":[{"text":"Maps arguments using a simple separator in-between","type":"text"}],"url":"\/documentation\/justtext\/jtmapplain","role":"symbol","fragments":[{"kind":"identifier","text":"JTMapPlain"}],"identifier":"doc:\/\/JustText\/documentation\/JustText\/JTMapPlain","title":"JTMapPlain"},"doc://JustText/documentation/JustText/JTMapMakeSep":{"kind":"symbol","identifier":"doc:\/\/JustText\/documentation\/JustText\/JTMapMakeSep","title":"JTMapMakeSep","fragments":[{"text":"JTMapMakeSep","kind":"identifier"}],"url":"\/documentation\/justtext\/jtmapmakesep","abstract":[{"type":"text","text":"Maps arguments, putting a specifically produced separator in-between"}],"type":"topic","role":"symbol"},"doc://JustText/documentation/JustText/JTMapParenSep":{"kind":"symbol","type":"topic","url":"\/documentation\/justtext\/jtmapparensep","abstract":[{"type":"text","text":"Maps arguments, putting unpacked separator in-between"}],"role":"symbol","fragments":[{"text":"JTMapParenSep","kind":"identifier"}],"identifier":"doc:\/\/JustText\/documentation\/JustText\/JTMapParenSep","title":"JTMapParenSep"},"doc://JustText/documentation/JustText/JTMapComma":{"kind":"symbol","identifier":"doc:\/\/JustText\/documentation\/JustText\/JTMapComma","title":"JTMapComma","fragments":[{"kind":"identifier","text":"JTMapComma"}],"url":"\/documentation\/justtext\/jtmapcomma","abstract":[{"text":"Maps arguments, putting comma in-between","type":"text"}],"type":"topic","role":"symbol"},"doc://JustText/documentation/JustText/JTForEach":{"kind":"symbol","identifier":"doc:\/\/JustText\/documentation\/JustText\/JTForEach","title":"JTForEach","fragments":[{"text":"JTForEach","kind":"identifier"}],"url":"\/documentation\/justtext\/jtforeach","abstract":[{"type":"text","text":"Applies it’s first argument to all the rest"}],"type":"topic","role":"symbol"},"doc://JustText/documentation/JustText/JTMap":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Applies first argument to all the rest, and custom glue the results"}],"url":"\/documentation\/justtext\/jtmap","role":"symbol","fragments":[{"text":"JTMap","kind":"identifier"}],"identifier":"doc:\/\/JustText\/documentation\/JustText\/JTMap","title":"JTMap"},"doc://JustText/documentation/JustText":{"kind":"symbol","type":"topic","abstract":[{"type":"emphasis","inlineContent":[{"text":"After all, it’s just a bunch of text","type":"text"}]}],"url":"\/documentation\/justtext","role":"collection","identifier":"doc:\/\/JustText\/documentation\/JustText","title":"JustText"}}}